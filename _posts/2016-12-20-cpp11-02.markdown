---
layout: post
title: 深入理解C++11（笔记）：第二章 保证稳定性与兼容性
subtitle: ' "First step."'
date: '2016-12-19 13:39'
header-img: img/post-bg-2015.jpg
tags:
  - c++
published: true
---

> "Let's begin!"

### 2.1 保持与C99兼容
#### 2.1.1 预定义宏  

宏名称 | 功能描述
---|---
__ STDC_HOSTED __ | 如果编译器的目标系统环境中包含完整的标准C库，那么这个宏就定义为1，否则宏的值为0
__ STDC __ | C编译器中通常用这个宏的值来表示编译器的实现是否和C标准一致。
__ STDC_VERSION __ | C编译器通常用这个宏来表示所支持的C标准的版本  

    如果用户重定义（#define）或（#undef）了预定义的宏，那么后果就是“未定义”的。  

#### 2.1.2 __ func __ 预定义标识符
*其基本功能就是返回所在函数的名字。*  
```
#include <string>
#include <iostream>
using namespace std;
const char *hello() { return __func__; }
const char *world() { return __func__; }
int main()
{
    cout << hello() << "," << world() << endl;
}
// 编译选项：g++ -std=c++11 xx.cpp
```  
```
// 下面的方式是可行的
struct TestStruct {
    TestStruct() : name(__func__) {}
    const char *name;
}
// 但是这样的形式是无法通过编译的
void FuncFail(string func_name = __func__) {}
// 这是由于在参数声明时，__func__还未被定义
```
