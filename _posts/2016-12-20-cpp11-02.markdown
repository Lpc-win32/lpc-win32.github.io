---
layout: post
title: 深入理解C++11（笔记）：第二章 保证稳定性与兼容性
subtitle: ' "稳定性与兼容性."'
date: '2016-12-19 13:39'
header-img: img/post-bg-2015.jpg
tags:
  - c++
published: true
---
> "Let's begin!"  

### 2.1 保持与C99兼容  
  
#### 2.1.1 预定义宏  

宏名称 | 功能描述
---|---
\_\_STDC\_HOSTED\_\_  | 如果编译器的目标系统环境中包含完整的标准C库，那么这个宏就定义为1，否则宏的值为0
\_\_STDC\_\_  | C编译器中通常用这个宏的值来表示编译器的实现是否和C标准一致。
\_\_STDC\_VERSION\_\_  | C编译器通常用这个宏来表示所支持的C标准的版本  

    如果用户重定义（#define）或（#undef）了预定义的宏，那么后果就是“未定义”的。  

#### 2.1.2 __ func __ 预定义标识符  
*其基本功能就是返回所在函数的名字。*  

```cpp
#include <string>
#include <iostream>
using namespace std;
const char *hello() { return __func__; }
const char *world() { return __func__; }
int main()
{
	cout << hello() << "," << world() << endl;
}
// 编译选项：g++ -std=c++11 xx.cpp
```  

```cpp
// 下面的方式是可行的
struct TestStruct {
	TestStruct() : name(__func__) {}
	const char *name;
}
// 但是这样的形式是无法通过编译的
void FuncFail(string func_name = __func__) {}
// 这是由于在参数声明时，__func__还未被定义
```  

#### 2.1.3 _Pragma 操作符
在C\+\+11中，准定义了与预处理指令#pragma功能相同的操作符_Pragma。  
**\#pragma once等同于\_Pragma("once")**  
相比于预处理指令#pragma，由于\_Pragma是一个操作符，因此可以用在一些宏中。而\#pragma不能在宏中展开，C++11的\_Pragma具有更大的灵活性。  
```cpp
#define ON CE("on")
#define CE(x) _Pargma(#x"ce")
ON          // 等同于#pragma once
```  

#### 2.1.4 变长参数的宏定义以及\_\_VA\_ARGS\_\_
在C99标准中，程序员可以使用变长参数的宏定义。  

    #define PR(...) printf(__VA_ARGS__)  

#### 2.1.5 宽窄字符串的连接  
窄字符串（char）转换成宽字符串（wchar_t）在之前的C\+\+标准中是未定义的行为。支持C\+\+11标准的编译器会将窄字符串转换成宽字符串，然后再与宽字符串进行连接。  

### 2.2 long long整型
```cpp
#include <climits>
#include <cstdio>
using namespace std;
int main()
{
    long long ll_min = LLONG_MIN;
    long long ll_max = LLONG_MAX;
    unsigned long long = ULLONG_MAX;
}
```  

### 2.3 扩展的整型
> C++11一共只定义了以下5种标准的有符号整数：  

    signed char、 short int、 int、 long int、 long long int  

### 2.4 宏\_\_cplusplus  
在C\+\+11中，\_\_cplusplus被预定义为201103L。  

```cpp
#if __cplusplus < 201103L
    #error "should use C++11 implementation"
#endif
```  
预处理指令\#error，使得非c++11标准的编译器立即报错并终止编译。  

### 2.5 静态断言  
#### 2.5.1 断言：运行时与预处理时  
在C++中，标准在\<cassert\>或\<assert.h\>头文件中为程序员提供了assert宏，==用于在运行时进行断言==。  
在C++中，程序员可以定义宏NDEBUG来禁用assert宏。  
```cpp
// 事实上，assert宏在<cassert>中的实现方式类似于下列形式
#ifdef NDEBUG
#define assert(exptr) (static_cast<void>(0))
#else
// do some things
#endif
```  

> 事实上，通过预处理指令#if和#error的配合，也可以让程序员在预处理阶段进行断言  

#### 2.5.2 静态断言与static_assert  
static\_assert使用起来非常简单，它接收两个参数，一个是断言表达式，这个表达式通常需要返回一个bool值；一个则是警告信息，它通常是一个字符串。  

```cpp
template <typename t, typename u> int bit_copy(t &a, u &b)
{
    static_assert(sizeof(b) == sizeof(a), "the parameters of bit_copy must have same width.");
};
// 这样的错误信息就会在程序的编译时期打印，非常的方便
```  

> 注意：static_assert的断言表达式的结果必须是在编译时期可以计算的表达式，即必须是常量表达式。  

### 2.6 noexception修饰符与noexcept操作符  
异常通常用于路基上可能发生的错误。  
noexcept修饰函数不会抛出异常。与throw()不同的是，在C\+\+中如果noexcept修饰的函数抛出了异常，编译器可以选择直接调用std::terminate()函数来终止程序的运行，这样的效率高于异常机制的throw()。  

```cpp
void excpt_func() noexcept;
void excpt_func() noexcept (常量表达式);
// 缺省为true，表示函数不会抛出异常
// 反之，则表示有异常抛出
```  

```cpp
// noexcept作为一个操作符时，通常可以用于模板
template <calss T>
void fun() noexcept(noexcept(T())) {}
// 这里fun函数是否是一个noexcept的函数，将由T()表达式是否会抛出异常所决定。
// 这里的第二个noexcept就是一个noexcept操作符。
// 当其参数是一个有可能抛出异常的表达式的时候，其返回值为false，反之为true
```  

> 虽然noexcept修饰的函数通过std::terminate的调用来结束程序的执行的方式可能会带来很多问题（析构函数正常调用，栈无法自动释放）。但是提高了程序退出的速率。往往是更加有效的。  

```cpp
// 在C++98中，new可能会包含一些抛出的std::bad_alloc异常
void *operator new(std::size_t) throw(std::bad_alloc);
// 在C++11中，使用noexcept(false)来进行替代
void *operator new(std::size_t) noexcept(false);
```

> noexcept更大的作用是保证应用程序的安全。一个类析构函数不应抛出异常。因此应在析构函数以及析构函数经常调用的delete函数设置成noexcept，借此提高程序的安全性  
C++11中析构函数在缺省的情况下被默认设置为noexcept(true)，从而阻止了异常的扩散。  

### 2.7 快速初始化成员变量  
